<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL的安装与基本配置]]></title>
    <url>%2F2018%2F06%2F06%2Fmysql_init%2F</url>
    <content type="text"><![CDATA[因为最近需要学习后端方面的知识，所以开始接触MySQL，中间踩了很多坑（无论是Windows端还是Linux端），花了两天才完全配好。写下这篇文章就算是个对MySQL安装的记录吧。 Windows端1、前期准备首先，前往MySQL官网下载相关的Windows端压缩包。注意！这里需要提醒的是，千万千万不要下载最新版本的MySQL！最新版本是MySQL8（截至2018.6.6），这个版本现阶段Bug奇多，而且网上没有对应的教程！本人建议下载5.6左右的版本，这几个是现在网上教程比较多、Bug相对较少的版本。下载后解压，自定义安装到自己喜欢的地址。然后，在你的MySQL安装目录下，会有一个my-default.ini的配置文件。此时我们需要稍微修改一下这个配置文件。我的ini文件配置如下：12345678910111213141516171819202122232425262728293031# For advice on how to change settings please see# http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html# *** DO NOT EDIT THIS FILE. It&apos;s a template which will be copied to the# *** default location during install, and will be replaced if you# *** upgrade to a newer version of MySQL.[mysqld]# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.# basedir = .....# datadir = .....# port = .....# server_id = .....# Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2M sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 配置完ini文件后，我们的前期准备工作就完成了。 2、启动MySQL数据库现在我们已经可以开始尝试启动MySQL数据库了，主要的命令有三个。以我的Windows为例，先以管理员身份打开cmd，然后键入D:(更改磁盘目录，我的MySQL安装在D盘，所以要修改路径，cmd路径默认为C)。更改到D盘后，可以看到D:\&gt;的标志。然后进入MySQL的bin目录所在地：cd D:\mysql-5.6.37-winx64\mysql-5.6.37-winx64\bin。此时我们已经进入到了MySQL的bin目录，如果你是5.7以下的版本，再分别输入以下命令：mysqld install和net start mysql即可。如果是5.7版本，则需要在mysqld install后键入命令mysqld --initialize-insecure以进行data目录的初始化。 注意：在输入mysqld install时，可能会出现msvcp100.dll缺失的报错，此时只要到微软官网下载VS_2010_vcredist_x64即可。 3、登陆并设置MySQL密码在当前目录下（bin目录）输入mysql -u root -p，此时会出现Enter password：语句，因为我们是初次登陆MySQL，所以直接按下Enter键即可。进入MySQL后cmd显示如下：12345678910111213Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.6.37 MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 现在我们可以开始设置自己root账户的密码。输入set password=password(&#39;你想要设置的密码&#39;);即可。 4、系统环境变量的设置如果我们每次使用MySQL，都要先进入到MySQL所在盘，再进入MySQL所在的bin目录，就会很麻烦。这时，我们可以通过设置系统的环境变量来简化过程，使得我们可以在cmd的初始界面就可以进入MySQL。打开此电脑-&gt;属性-&gt;高级-&gt;环境变量，在用户变量的path中追加D:\mysql-5.6.37-winx64\mysql-5.6.37-winx64\bin；（此处填你的MySQL的bin文件夹路径）此时再打开cmd，直接打mysql即可进入数据库。1234567891011121314C:\Users&gt;mysqlWelcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.6.37 MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 5、GUI工具及其它 sqlyog(可能要翻墙)：轻量级数据库可视化工具，能节省很多时间。 cmd中的启动和停止服务命令：net stop mysql和net start mysql cmd中退出mysql环境的命令:exit Linux端1、下载与安装声明：本人Linux环境为CentOs7.3，Ubuntu的会有所不同首先，使用yum安装MySQL：1yum install mysql-server -y 安装完成后，启动 MySQL 服务：1service mysqld restart 设置 MySQL 账户 root 密码：1/usr/bin/mysqladmin -u root password '你想要设置的密码' 将 MySQL 设置为开机自动启动：1chkconfig mysqld on 到这步，我们在Linux下的MySQL安装就基本完成了，现在我们已经可以在Linux内愉快的使用MySQL啦~~ 2、开启远程连接上面的Windows端介绍了sqlyog这款可视化工具。其实它不仅可以用于Windows端的mysql，也可以远程连接Linux服务器下的MySQL。 具体配置方法如下：在MySQL控制台下分别输入：123grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;123456&apos; with grant option; # root是用户名，%代表任意主机，&apos;123456&apos;指定的登录密码（这个和本地的root密码可以设置不同的，互不影响）flush privileges; # 重载系统权限exit; 此时已经设置好了MySQL的远程连接设置，接下来就是开放端口（一般是3306或3309）：12// --permanent 永久生效,没有此参数重启后失效firewall-cmd --zone=public --add-port=3306/tcp --permanent 关于CentOs7的firewalld设置具体可以看CentOS7使用firewalld打开关闭防火墙与端口或Centos7开放3306端口。 3、修改编码格式当我们使用MySQL的时候，可能会遇到出现中文乱码的情况，这是为什么呢？我们可以在MySQL控制台下输入show variables like &#39;character%&#39;;命令来查看一下。你会发现，编码格式并不全都是utf8，在database一栏编码格式为latin1，这是MySQL的默认编码。也正是因此，中文输入才会在数据库中变成乱码。这个时候，我们就要修改MySQL的my.cnf配置文件了，具体修改如下：1234567891011121314# 如果没有client和mysql栏就不必添加上去了，配置的核心在于mysqld[client]port = 3306socket = /var/lib/mysql/mysql.sock+ default-character-set=utf8...[mysqld]port = 3306socket = /var/lib/mysql/mysql.sock+ character-set-server=utf8...[mysql]no-auto-rehash+ default-character-set=utf8 修改完成之后，在Linux命令行下输入service mysql restart重启mysql服务。这时在MySQL控制台再次输入show variables like &#39;character%&#39;;，就会发现，原本是latin1的都变成了utf8，这时，一般来说，就已经不会出现中文乱码了。 注意：以上是一般情况，有时会出现极其特殊的情况，那就是，你什么都配置成功了，服务器端、网页端等等等等都是utf-8编码，但显示数据库就是中文乱码！！这时基本就只有一个办法了，那就是，每次你要进行增删改查前，都先进行SET NAMES &#39;UTF8&#39;;的操作。比如我用的是php语言，我在每次insert前都先来一句mysqli_query(&quot;SET NAMES UTF8&quot;);以便不会出现中文乱码。同时，我个人认为，即使你的MySQL一切正常，也应该输入这条语句，因为它能让你的网页（或其它吧）在更多的服务器上正常的显示（有些可能就是乱码，怎么设置都没辙…当然也可能是因为我菜吧….）。 总结这次弄MySQL，一是因为web程序设计课需要用到，二是我们大创也有涉及到数据库的使用，所以就不辞劳苦、百费周折的搞了出来。其实说实话，我一个懒宅，本来是不想搞这些麻烦事的，但是，唉（无奈+委屈）…]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Linux</tag>
        <tag>CentOs</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[嗯…自今日起我的个人博客就算上线拉。第一篇文章就说说该博客的由来吧。 question 1：为什么有自建博客的想法emmmm…我知道有不少人本身就是大神，只是因为受不了CSDN、博客园等博客门户的广告和设计才自建博客的，或者纯粹是想展现一下自己的技术水平。 但我很明显不属于大神行列（捂脸）。因此想自建博客的原因也很简单，就是想要个属于自己的小窝啊。 看着博客园、论坛什么的总觉得有种寄人篱下的感觉，而且也想顺带激励自己学习技术，有Coding的动力吧（不是建博客GitHub都不带用的Orz）。 当然，还有一个小小的原因，就是有时看动画看轻小说，漫评轻评还有喜欢的ACGN的作品图、赏析都可以放上来，供自己回忆或者欣赏用。毕竟再怎么说，也是ACGer，有个小站，当然要放点东西拉。 question 2：博客建站的方式是什么说实话，把这说成建站感觉有点侮辱纯diy的技术大牛了，毕竟真正需要自己打代码的地方几乎没有（正合我意）。 这个博客网站是挂在GitHub上运行的，使用了Hexo博客系统的NeXT主题模板。至于域名则是设置了从github.io跳转到现在的个人域名timealley.name（五年续费300大洋，土都要吃不起了(╯#-_-)╯）。不过为了有家的感觉，还算值了♪（＾∀＾●）。 再说到为什么用现成博客系统呢，那当然是因为我菜啊。毕竟C++也没学好，Java也不会，html、css这种前端语言学的也是磕磕绊绊，自己diy是不可能diy的，又没什么本事，只能靠copy别人的代码过日子了。 question 3：Hexo建站简略步骤估计我的个人博客是没人看的，毕竟没搞什么sitemap设置（好像是这么叫？不太清楚），在百度、google搜索中应该不会靠前OR粗现吖。 不过万一呢，万一有人无意中来到我的小窝，又想建个网站，那可如何是好啊。所以，建站简略步骤应运而生拉。登登登登~~~~ 注册Github账号 创建项目库并下载各种东西 利用Git命令行下载Hexo 安装NeXT主题模板 根据个人喜好设置 上传至Github 绑定至个人域名（可选） 是不是很简略呢。当然要想真正建站还是得要看下详细步骤、初级教程和高阶攻略的。 question 4：博客目前功能有哪些因为自己也不会写脚本，前端语言代码也写不好，就到处找小插件安装教程（官方API不知道写的什么玩意，乱七八糟的）。 目前大概实现的功能不太多，但应该够用了，估计以后不会怎么改了，毕竟建博客还是专心写文章嘛，本末不能倒置（其实只是因为自己菜，怕一不小心网站全崩）。 不过，需要提醒的是，现在的网站留言板和评论功能需要海外IP才能访问和使用，因为本站用的是第三方的Disqus评论系统，国内被墙（不copy别人的本地评论系统代码还是因为不知道该放哪个文件夹，怕崩）。 总结一下功能↘ 站内搜索 评论与留言（海外IP） 返回顶部 阅读时长和字数统计 个人联系方式 已更新国内海外双评论系统(18/5/15) 添加基于DaoVoice的在线聊天系统(18/5/15) 新增文章底部的分享功能(18/5/15) 开放照片墙(18/5/15) question 5：为什么起这个博客名字名字网站左上角：拾光宅巷只是几个星期前的灵光一现而已。本来想着用来做公众号的名字，结果现在公众号也荒废长草了….. 拾光，本来想的是时光，因为输入法，打成了拾光。想想，却是更有意境，拾起旧时光，追忆往昔，这不正是写博客文章的意义所在吗。记忆无法保留的，博客会替你保留，记忆会逐渐模糊，但博客的文字能记载你往昔的欢声笑语与泪眼婆娑。再过二十年，重温博文，读起当年的文字，于字里行间拾起的，是过往的时光。 宅巷，当时我就想，我作为一个伪宅，怎么都得有点ACG的气息吧，怎么都得有点宅的气息吧，怎么起名好呢，宅舍、宅巷、宅居、宅窝等等想了一大堆。在这些当中选宅巷，一是因为国语读着顺嘴，二则是受到了典故的启发。有道是，酒香不怕巷子深，我倒是觉得深巷老宅，独嗅酒香又如何，人迹罕至又如何，独乐乐亦为乐也。因此，我把宅巷加在博客名中。 这就是拾光宅巷的由来。 question 6：以后博客的方向是什么入了计算机的坑，估计很难再出来了。虽然自己是个技术渣的，但还是得努力的，怕还是得在这行干个几十年呢。所以，技术博文肯定是有的，毕竟主因就是为了激励自己学习技术嘛。 至于ACG这个爱好嘛，已经八年了，我想我还能喜欢很多个八年，所以，博客肯定也会有关于ACG的文章，包括但不限于番剧。 然后，生活方面，估计会发些牢骚吧，不过访问密码是肯定设了的，当然静态网页的伪加密访问估计很容易破解吧。嘛，随便拉。 question 7：对未来有什么期许/寄语能有什么期许呢，躺着赚钱什么的是不可能的拉，世上哪有这种好事，有也轮不到我啊。只是希望自己在大学的剩下两年能学自己喜欢的东西，做自己喜欢做的事情，记录下想要记录的东西。至于更遥远的未来，希望能活得悠哉悠哉的，而不是东奔西跑，疲于奔赴。可以enjoy the life而不是make ends meet；可以真正做到个人箴言的『いちごいちえ』。。最后，代表初生的拾光宅巷：Hello World]]></content>
      <categories>
        <category>拾光随想</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
